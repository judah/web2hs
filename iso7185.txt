This is taken from 
http://pascal-central.com/iso7185.html#6.7 Expressions
which is a web copy (partially OCR'd) of the grammar used by ISO7185.

To render:
    
    pandoc -f markdown -t html iso7185.txt -o iso7185.html

## Lexer
### Reserved keywords

    word-symbol = 'and' | 'array' | 'begin' | 'case' | 'const' | 'div'
                | 'do' | 'downto' | 'else' | 'end' | 'file' | 'for'
                | 'function' | 'goto' | 'if' | 'in' | 'label' | 'mod'
                | 'nil' | 'not' | 'of' | 'or' | 'packed' | 'procedure'
                | 'program' | 'record' | 'repeat' | 'set' | 'then'
                | 'to' | 'type' | 'until' | 'var' | 'while' | 'with'.
    special-symbol = '+' | '~' | '*' | '/' | '=' | '<' | '>' | '[' | ']'
                   | '.' | ',' | ':' |' ;' | '"' | '(' | ')'
                   | '<>' | '<=' | '>=' | ' :=' | '..' | word-symbol
 
### Identifiers

    identifier = letter { letter | digit }.
    letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j'
           | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't'
           | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'.

Note that `letter` also implicitly includes upper-case characters.

    identifier-list = identifier { ',' identifier }.

### Numbers

    unsigned-integer = digit-sequence.
    digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' .
    digit-sequence = digit { digit } .

    unsigned-real = digit-sequence '.' fractional-part [ 'e' scale-factor ]
                  | digit-sequence 'e' scale-factor.
    fractional-part = digit-sequence.
    scale-factor = [ sign ] digit-sequence.
    sign = '+' | '-'.
 
### Labels

    label = digit-sequence.
 
### Constants

    character-string = ''' string-element { string-element } '''
    string-character = one-of-a-set-of-implementation-defined-characters.
    string-element = apostrophe-image | string-character.

    constant = [ sign ] ( unsigned-number | constant-identifier )
             | character-string.
    constant-identifier = identifier .

From what I've seen, TeX and friends don't use constant identifiers since WEB
preprocesses those away.

## Types

    type-denoter = type-identifier | new-type.
    type-identifier = identifier.
    new-type = new-ordinal-type | new-structured-type | new-pointer-type.
    new-ordinal-type = enumerated-type | subrange-type.

    new-structured-type = [ 'packed' ] unpacked-structured-type.
    unpacked-structured-type = array-type | record-type | set-type | file-type.

    array-type = 'array' '[' index-type { ',' index-type } ']' 'of' component-type .
    index-type = ordinal-type.
    ordinal-type = new-ordinal-type | ordinal-type-identifier.
    ordinal-type-identifier = type-identifier.
    component-type = type-denoter .

    record-type = 'record' field-list 'end'.
    field-list = [ ( fixed-part [ ';' variant-part ] | variant-part ) [ ';' ] ].
    fixed-part = record-section { ';' record-section }.
    record-section = identifier-list ':' type-denoter.
    variant = case-constant-list ':' '(' field-list ')'.
    variant-part = 'case' variant-selector 'of' variant { ';' variant }.
    variant-selector = [ tag-field ':' ] tag-type.

    file-type = 'file' 'of' component-type.

Enumerated types are like Haskell `Enum` types.

    enumerated-type = '(' identifier-list ')'.
    subrange-type = constant '..' constant.

I don't think that TeX uses pointer types.

    new-pointer-type = '"' domain-type.
    domain-type = type-identifier.
 


## Programs

    program = program-heading ';' program-block '.'.
    program-block = block.
    program-heading = 'program' identifier [ '(' program-parameter-list ')' ] .
    program-parameter-list = identifier-list.

## Blocks

    block = label-declaration-part constant-definition-part type-definition-part
            variable-declaration-part procedure-and-function-declaration-part
            statement-part .
    
    label-declaration-part = [ 'label' label { ',' label } ';' ] .

    constant-definition = identifier '=' constant.
    constant-definition-part = [ 'const' constant-definition ';' { constant-definition ';' } ] .

    type-definition = identifier '=' type-denoter.
    type-definition-part = [ 'type' type-definition ' ;' { type-definition ';' } ] .

    variable-declaration = identifier-list ':' type-denoter.
    variable-declaration-part = [ 'var' variable-declaration ' ;' { variable-declaration ';' } ] .

    procedure-and-function-declaration-part = { ( procedure-declaration
                                                | function-declaration ) ';' } .

    statement-part = compound-statement.

## Declaring procedures and functions

### Procedures

    procedure-declaration = procedure-heading ';' directive
                          | procedure-identification ';' procedure-block
                          | procedure-heading ';' procedure-block .
    procedure-heading = 'procedure' identifier [ formal-parameter-list ].
    procedure-identification = 'procedure' procedure-identifier.
    procedure-identifier = identifier.
    procedure-block = block.

### Functions

    function-block = block.
    function-declaration = function-heading ';'directive
                         | function-identification ';' function-block
                         | function-heading ';' function-block.
    function-heading = 'function' identifier [ formal-parameter-list ] ':' result-type.
    function-identification = 'function' function-identifier.
    function-identifier = identifier.
    result-type = simple-type-identifier | pointer-type-identifier.
    simple-type-identifier = type-identifier.
    pointer-type-identifier = type-identifier.

### Directives
The only directive in ISO7185 is `forward`.

    directive = letter { letter | digit }.

### Formal parameters
    formal-parameter-list = '(' formal-parameter-section { ';' formal-parameter-section } ')' .
    formal-parameter-section = value-parameter-specification
                             | variable-parameter-specification
                             | procedural-parameter-specification
                             | functional-parameter-specification.
                             | conformant-array-parameter-specification.

    value-parameter-specification = identifier-list ':' type-identifier.
    variable-parameter-specification = 'var' identifier-list ':' type-identifier.
    
#### Functions and procedures as parameters

    procedural-parameter-specification = procedure-heading.
    functional-parameter-specification = function-heading.

#### Conformant arrays

This is an extension that TeX doesn't use.
    conformant-array-parameter-specification = value-conformant-array-specification
                                             | variable-conformant-array-specification.
     
    conformant-array-schema = packed-conformant-array-schema
                            | unpacked-conformant-array-schema.
     
    variable-conformant-array-specification = 'var' identifier-list ':' conformant-array-schema.
    value-conformant-array-specification = identifier-list ':' conformant-array-schema.

## Variable accesses

    variable-access = entire-variable | component-variable | identified-variable
                    | buffer-variable.
    entire-variable = variable-identifier.
    component-variable = indexed-variable | field-designator.

    indexed-variable = array-variable '[' index-expression, { ',' index-expression } ']'
    array-variable = variable-access .
    index-expression = expression.
    
    field-designator = record-variable '.' field-specifier | field-designator-identifier.
    record-variable = variable-access.
    field-specifier = field-identifier.
    field-identifier = identifier.

    buffer-variable = file-variable '^' .
    file-variable = variable-access.
    identified-variable = pointer-variable '^'.
    pointer-variable = variable-access.


A `field-designator-identifier` is used in `with` statements.

    field-designator-identifier = identifier.

## Statements


    compound-statement = 'begin' statement-sequence 'end'.
    statement-sequence = statement { ';' statement }.
    statement = [ label ' :' ] ( simple-statement | structured-statement ).
    simple-statement = empty-statement | assignment-statement
                     | procedure-statement | goto-statement.
    structured-statement = compound-statement | conditional-statement
                         | repetitive-statement | with-statement.

    empty-statement =.
    goto-statement = 'goto' label.
    
    assignment-statement = ( variable-access | function-identifier ) ':=' expression .

    procedure-statement = procedure-identifier ( [ actual-parameter-list ]
                          | read-parameter-list | readln-parameter-list
                          | write-parameter-list | writeln-parameter-list ) .

    actual-parameter = expression | variable-access | procedure-identifier
                     | function-identifier.
    actual-parameter-list = '(' actual-parameter { ',' actual-parameter } ')' .

    conditional-statement = if-statement | case-statement.
    if-statement = 'if' Boolean-expression 'then' statement [ else-part ].
    else-part = 'else' statement.
    case-statement = 'case' case-index 'of' case-list-element
                     { ';' case-list-element } [ ';' ] 'end' .
    case-index = expression .
    case-list-element = case-constant-list ':' statement .
    case-constant = constant .
    case-constant-list = case-constant { ',' case-constant } .

    repetitive-statement = repeat-statement | while-statement | for-statement.
    while-statement = 'while' Boolean-expression 'do' statement.
    repeat-statement = 'repeat' statement-sequence 'until' Boolean-expression.
    for-statement = 'for' control-variable ':=' initial-value ( 'to' | 'downto' ) final-value
    Boolean-expression = expression .
    initial-value = expression.
    final-value = expression.
    control-variable = entire-variable .
    
From the ISO:
    An if-statement without an else-part shall not be immediately followed by the token else.
    An else-part is thus paired with the nearest preceding otherwise unpaired then.

### Syntax of read and write


    read-parameter-list = '(' [ file-variable ',' ] variable-access { ',' variable-access } ')'
    readln-parameter-list = [ '(' ( file-variable | variable-access )
                            { ',' variable-access } ')' ].

The only difference between the syntax of `read/write` and `readln/writeln` is that the
latter's arguments are optional.

    write-parameter = expression [ ':' expression [ ':' expression ] ].
    write-parameter-list = '(' [ file-variable ',' ] write-parameter
                           { ',' write-parameter } ')'.
    writeln-parameter-list = [ '(' ( file-variable | write-parameter )
                             { ',' write-parameter } ')' ].
     

### With statements

    with-statement = 'with' record-variable-list 'do' statement.
    record-variable-list = record-variable { ',' record-variable }.

## Rest
    adding-operator = '+' | '-' | 'or' .
    apostrophe-image = '"' .
    base-type = ordinal-type .
    bound-identifier = identifier .
    
    expression = simple-expression [ relational-operator simple-expression ].
    factor > bound-identifier.
    factor > variable-access | unsigned-constant | function-designator
           | set-constructor | '(' expression ')' | 'not' factor.
    function-designator = function-identifier [ actual-parameter-list ].
    index-type-specification = identifier '..' identifier ':' ordinal-type-identifier.
    member-designator = expression [ '..' expression ].
    multiplying-operator = '*' | '/' | 'div' | 'mod' | 'and'.
    packed-conformant-array-schema = 'packed' 'array' '[' index-type-specification ']'
                                     'of' type-identifier.
    pointer-type = new-pointer-type | pointer-type-identifier.
    real-type-identifier = type-identifier.
    relational-operator = '=' | '<>' | '<' | '>' | '<=' | '>=' | 'in'.
    set-constructor = '[' [ member-designator { ',' member-designator } ] ']'.
    set-type = 'set' 'of' base-type.
    signed-integer = [ sign ] unsigned-integer.
    signed-number = signed-integer | signed-real.
    signed-real = [ sign ] unsigned-real.
    simple-expression = [ sign ] term { adding-operator term }.
    simple-type = ordinal-type | real-type-identifier.
    structured-type = new-structured-type | structured-type-identifier.
    structured-type-identifier = type-identifier.
    tag-field = identifier.
    tag-type = ordinal-type-identifier.
    term = factor { multiplying-operator factor }.
    unpacked-conformant-array-schema =
         'array' '[' index-type-specification { ';' index-type-specification } ']'
         'of' ( type-identifier | conformant-array-schema ).
    unsigned-constant = unsigned-number | character-string | constant-identifier | 'nil'.
    unsigned-number = unsigned-integer | unsigned-real.
    variable-identifier = identifier.
    
